import random
import streamlit as st
import numpy as np
import matplotlib.pyplot as plt
from surprise import Dataset, KNNBasic, Reader, SVD
from collections import defaultdict
import pandas as pd

st.set_page_config(page_title="Reco Mentors", page_icon="üéì")

st.title(" Syst√®me de recommandation de mentors")

# Charger les donn√©es
df = pd.read_csv("Parent_Mentor_Matrix.csv")
df_long = df.reset_index().melt(id_vars='parent_id', var_name='mentor_id', value_name='rating')
df_long = df_long[df_long['rating'] > 0]

# Pr√©paration Surprise
reader = Reader(rating_scale=(1, 5))
data = Dataset.load_from_df(df_long[['parent_id', 'mentor_id', 'rating']], reader)
trainset = data.build_full_trainset()

# S√©lection du mod√®le
model_choice = st.radio("Choisir le mod√®le de recommandation :", ["SVD", "kNN", "Blend (SVD + kNN)"])


algo = SVD()
algo.fit(trainset)

# Interface
parent_ids = df_long["parent_id"].unique()
selected_parent = st.selectbox("Choisir un parent :", parent_ids)

# Recommandations
all_mentors = df_long["mentor_id"].unique()
parent_data = df_long[df_long['parent_id'] == selected_parent]
seen_mentors = parent_data['mentor_id'].tolist()

# Simulation : on suppose que le parent n‚Äôa vu que 70% des mentors qu‚Äôil a not√©s
if len(seen_mentors) >= 3:  # pour √©viter les erreurs si trop peu de mentors
    masked_seen = random.sample(seen_mentors, int(0.7 * len(seen_mentors)))
else:
    masked_seen = seen_mentors

# Mentors √† recommander (non simul√©s comme vus)
non_interacted = [m for m in all_mentors if m not in masked_seen]

# üß† Entra√Ænement des mod√®les
algo_svd = SVD()
algo_knn = KNNBasic(sim_options={"user_based": False})
algo_svd.fit(trainset)
algo_knn.fit(trainset)

# üß™ Recommandation selon le mod√®le s√©lectionn√©
if model_choice == "SVD":
    preds = [(m, algo_svd.predict(selected_parent, m).est) for m in non_interacted]
elif model_choice == "kNN":
    preds = [(m, algo_knn.predict(selected_parent, m).est) for m in non_interacted]
elif model_choice == "Blend (SVD + kNN)":
    alpha = 0.5  # pond√©ration
    preds = []
    for m in non_interacted:
        svd_pred = algo_svd.predict(selected_parent, m).est
        knn_pred = algo_knn.predict(selected_parent, m).est
        blend_score = alpha * svd_pred + (1 - alpha) * knn_pred
        preds.append((m, blend_score))


# Affichage des recommandations
st.subheader("Recommandations simul√©es")
if preds:
    preds_sorted = sorted(preds, key=lambda x: x[1], reverse=True)[:5]
    for mentor, score in preds_sorted:
        st.write(f"Mentor **{mentor}** ‚Äì Score estim√© : `{score:.2f}`")
    
        
    mentors, scores_blend = zip(*preds_sorted)
    scores_svd = [algo_svd.predict(selected_parent, m).est for m in mentors]
    scores_knn = [algo_knn.predict(selected_parent, m).est for m in mentors]

    fig, ax = plt.subplots(figsize=(8, 4))
    x = np.arange(len(mentors))
    width = 0.25

    ax.bar(x - width, scores_svd, width, label='SVD', color='#6AC6E8')
    ax.bar(x, scores_knn, width, label='kNN', color='#F28C38')
    ax.bar(x + width, scores_blend, width, label='Blend', color='#888888')

    ax.set_ylabel('Score estim√©')
    ax.set_title('Comparaison des scores des mentors recommand√©s')
    ax.set_xticks(x)
    ax.set_xticklabels(mentors)
    ax.legend()

    st.pyplot(fig)

else:
    st.warning("Aucun mentor √† recommander pour ce parent. Tous les mentors sont d√©j√† not√©s.")

with st.expander("Analyse comparative des mod√®les", expanded=False):
    st.markdown("""
    **Comparaison des performances**

    | Mod√®le | RMSE | MAE |
    |--------|------|-----|
    | SVD | 0.5168 | 0.4203 |
    | kNN | 0.4897 | 0.3976 |
    | Blend (Œ± = 0.70) | 0.4959 | 0.4029 |

    **Interpr√©tation :**
    - Le mod√®le **SVD** pr√©dit toujours des scores proches de 5.00, sans variation selon le parent ‚Üí peu utile.
    - Le **kNN** propose des scores **personnalis√©s et coh√©rents** selon le parent ‚Üí plus r√©aliste.
    - Le **Blend** combine les deux approches pour fournir des recommandations **√©quilibr√©es et fiables**.

    En conclusion, le mod√®le blend√© est **le plus adapt√©** pour une exp√©rience utilisateur pertinente.
    """)
